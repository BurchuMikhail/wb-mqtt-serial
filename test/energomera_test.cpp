#include <string>
#include "fake_serial_port.h"
#include "devices/energomera_iec_device.h"

namespace
{
    class TEnergomeraIntegrationTest: public TSerialDeviceIntegrationTest, public virtual TExpectorProvider
    {
    protected:
        const char* ConfigPath() const
        {
            return "configs/config-energomera-test.json";
        }

        std::string GetTemplatePath() const override
        {
            return "../wb-mqtt-serial-templates";
        }
    
        void EnqueuePollRequests()
        {
            Expector()->Expect(
                {   // /?00000211!<SOH>R1<STX>GROUP(400B(7)400D(1)5003(1))<ETX>
                    0x2f, 0x3f, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x31, 0x31, 0x21, 
                    0x01, 0x52, 0x31, 0x02, 
                    0x47, 0x52, 0x4f, 0x55, 0x50, 0x28,
                    0x34, 0x30, 0x30, 0x42, 0x28, 0x37, 0x29, 
                    0x34, 0x30, 0x30, 0x44, 0x28, 0x31, 0x29, 
                    0x35, 0x30, 0x30, 0x33, 0x28, 0x31, 0x29, 
                    0x29, 0x03, 0x68
                },
                {   // <STX>400B(E12)(118.8)(121.1)400D(50.01)5003(009114135064195)<ETX>
                    0x02, 
                    0x34, 0x30, 0x30, 0x42, 0x28, 0x45, 0x31, 0x32, 0x29, 0x28, 0x31, 0x31, 0x38, 0x2e, 0x38, 0x29, 0x28, 0x31, 0x32, 0x31, 0x2e, 0x31, 0x29,
                    0x34, 0x30, 0x30, 0x44, 0x28, 0x35, 0x30, 0x2e, 0x30, 0x31, 0x29, 
                    0x35, 0x30, 0x30, 0x33, 0x28, 0x30, 0x30, 0x39, 0x31, 0x31, 0x34, 0x31, 0x33, 0x35, 0x30, 0x36, 0x34, 0x31, 0x39, 0x35, 0x29, 0x03, 0x1e
                }, __func__);
        }
    };
}

TEST_F(TEnergomeraIntegrationTest, Poll)
{
    EnqueuePollRequests();
    Note() << "LoopOnce()";
    SerialDriver->LoopOnce();
}
